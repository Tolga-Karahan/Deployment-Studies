kind: ConfigMap
apiVersion: v1
metadata:
  # Hardcoding release names is a bad practice. 
  # We can use built in .Release.Name object of helm to generate it dynamically.
  name: {{ .Release.Name }}-configmap
  namespace: practicing
data:
    # We can use value of the specified key from values.yaml file 
    # We can use functions to transform dynamic values
    # We can use default function to specify a default value
    drink: {{ .Values.favorite.drink | default "tea" | quote }}
    food: {{ .Values.favorite.food | quote }}
    # We can also add conditionals to conditionally generate our template
    # We should add "- " to remove spaces in left that generated by templating engine
    {{- if eq .Values.favorite.drink "beer" }}
    mug: true
    {{- end }}
    # with statement changes current scope of "."
    {{- with .Values.favorite}}
    dessert: {{ .dessert | quote }}
    {{- end }}
    # range statement provides looping capability
    # range also sets the scope as does with. It sets the scope of "."
    # to the current item in the loop, so "." corresponds to the current item.
    # We can send value of "." to a pipeline too
    hobbies: |-
      {{- range .Values.hobbies }}
      - {{  . | title | quote }}
      {{- end }}
    # Creating a list-like collection on the fly and iterating over it is also possible
    # To create this we are using tuple function
    sizes: |-
      {{- range tuple "small" "medium" "large" }}
      -  {{ . }}
      {{- end }}
    # By use variables in loops to capture more information
    tools: |-
      {{- range $index, $tool := tuple "docker" "k8s" "helm" }}
        {{ $index }}: {{ $tool }}
      {{- end }}
    # We can use variables for looping on key-value structures
    favoriteMap: |-
      {{- range $key, $val := .Values.favorite }}
        {{ $key }}: {{ $val | quote }}
      {{- end}}
    
